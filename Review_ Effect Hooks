In this lesson, we learned how to write effects that manage timers, manipulate the DOM, and fetch data from a server. With the Effect Hook, we can perform these types of actions in function components with ease!

Let’s review the main concepts from this lesson:

We can import the useEffect() function from the 'react' library and call it in our function components.
Effect refers to a function that we pass as the first argument of the useEffect() function. By default, the Effect Hook calls this effect after each render.
The cleanup function is optionally returned by the effect. If the effect does anything that needs to be cleaned up to prevent memory leaks, then the effect returns a cleanup function, then the Effect Hook will call this cleanup function before calling the effect again as well as when the component is being unmounted.
The dependency array is the optional second argument that the useEffect() function can be called with in order to prevent repeatedly calling the effect when this is not needed. This array should consist of all variables that the effect depends on.
The Effect Hook is all about scheduling when our effect’s code gets executed. We can use the dependency array to configure when our effect is called in the following ways:

Dependency Array	Effect called after first render & …
undefined	every re-render
Empty array	no re-renders
Non-empty array	when any value in the dependency array changes

Hooks gives us the flexibility to organize our code in different ways, grouping related data as well as separating concerns to keep code simple, error-free, reusable, and testable!

Optional Effect Hook: Cleanup function and dependancy array
Not a reason for using Hooks: To use Lifecycle Methods like componenetDidMount().
Second argument pass to useEffect()To configure when React calls our effect.
Dependency array that would cause an effect to be called only after the first render: useEffect(effectCallBack, []);
Why should we use Hooks with function components? Hooks add state to function components.
Where in a function component should we call unsubscribe()? In a cleanup function, returned by the first argument of the Effect Hook.

function FetchAndViewData({ endpoint }) {
    const [data, setData] = useState(null);
    useEffect(() => {
        get(endpoint).then((response) => setData(response.data));
    }, [endpoint]);
    return <div>{JSON.stringify(data, '', 2)}</div>;
}

function DocumentClicks() {
  const [clicks, setClicks] = useState(0);
  const increment = () => setClicks((prev) => prev + 1);
  useEffect(() => {
    document.addEventListener('mousedown', increment);
    return function cleanup() {
        document.removeEventListener('mousedown', increment);
    }
  }, []);
  return <span>{clicks}</span>;
}

Let’s define a component that uses:

an event listener on the document element to track mouse position
a network request to fetch JSON data from a server
state to track both of these values between renders
Which of the following patterns gives us the greatest separation of concerns? Use a State amd Effect Hook for managing the position data, then another State Hook and Effect Hook for managing the JSON data.